Elm.Css = Elm.Css || {};
Elm.Css.Namespace = Elm.Css.Namespace || {};
Elm.Css.Namespace.make = function (_elm) {
   "use strict";
   _elm.Css = _elm.Css || {};
   _elm.Css.Namespace = _elm.Css.Namespace || {};
   if (_elm.Css.Namespace.values) return _elm.Css.Namespace.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Css$Helpers = Elm.Css.Helpers.make(_elm),
   $Css$Preprocess = Elm.Css.Preprocess.make(_elm),
   $Css$Structure = Elm.Css.Structure.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var applyNamespaceToProperty = F2(function (name,property) {
      var _p0 = property.key;
      if (_p0 === "animation-name") {
            return _U.update(property,{value: A2($Basics._op["++"],name,property.value)});
         } else {
            return property;
         }
   });
   var applyNamespaceToRepeatable = F2(function (name,selector) {
      var _p1 = selector;
      switch (_p1.ctor)
      {case "ClassSelector": return $Css$Structure.ClassSelector(A2($Basics._op["++"],name,_p1._0));
         case "IdSelector": return $Css$Structure.IdSelector(A2($Basics._op["++"],name,_p1._0));
         default: return $Css$Structure.PseudoClassSelector(_p1._0);}
   });
   var applyNamespaceToSequence = F2(function (name,sequence) {
      var _p2 = sequence;
      switch (_p2.ctor)
      {case "TypeSelectorSequence": return A2($Css$Structure.TypeSelectorSequence,_p2._0,A2($List.map,applyNamespaceToRepeatable(name),_p2._1));
         case "UniversalSelectorSequence": return $Css$Structure.UniversalSelectorSequence(A2($List.map,applyNamespaceToRepeatable(name),_p2._0));
         default: return A2($Css$Structure.CustomSelector,_p2._0,A2($List.map,applyNamespaceToRepeatable(name),_p2._1));}
   });
   var applyNamespaceToSelector = F2(function (name,_p3) {
      var _p4 = _p3;
      var apply = applyNamespaceToSequence(name);
      return A3($Css$Structure.Selector,
      apply(_p4._0),
      A2($List.map,function (_p5) {    var _p6 = _p5;return {ctor: "_Tuple2",_0: _p6._0,_1: apply(_p6._1)};},_p4._1),
      _p4._2);
   });
   var applyNamespaceToMixin = F2(function (name,mixin) {
      var _p7 = mixin;
      switch (_p7.ctor)
      {case "AppendProperty": return $Css$Preprocess.AppendProperty(A2(applyNamespaceToProperty,name,_p7._0));
         case "ExtendSelector": return A2($Css$Preprocess.ExtendSelector,
           A2(applyNamespaceToRepeatable,name,_p7._0),
           A2($List.map,applyNamespaceToMixin(name),_p7._1));
         case "NestSnippet": return A2($Css$Preprocess.NestSnippet,_p7._0,A2($List.map,applyNamespaceToSnippet(name),_p7._1));
         case "WithPseudoElement": return A2($Css$Preprocess.WithPseudoElement,_p7._0,A2($List.map,applyNamespaceToMixin(name),_p7._1));
         case "WithMedia": return A2($Css$Preprocess.WithMedia,_p7._0,A2($List.map,applyNamespaceToMixin(name),_p7._1));
         default: return $Css$Preprocess.ApplyMixins(A2($List.map,applyNamespaceToMixin(name),_p7._0));}
   });
   var applyNamespaceToSnippet = F2(function (name,_p8) {
      var _p9 = _p8;
      return $Css$Preprocess.Snippet(A2($List.map,applyNamespaceToDeclaration(name),_p9._0));
   });
   var applyNamespaceToDeclaration = F2(function (name,declaration) {
      var _p10 = declaration;
      switch (_p10.ctor)
      {case "StyleBlockDeclaration": return $Css$Preprocess.StyleBlockDeclaration(A2(applyNamespaceToStyleBlock,name,_p10._0));
         case "MediaRule": return A2($Css$Preprocess.MediaRule,_p10._0,A2($List.map,applyNamespaceToStyleBlock(name),_p10._1));
         case "SupportsRule": return A2($Css$Preprocess.SupportsRule,
           _p10._0,
           function (declarations) {
              return _U.list([$Css$Preprocess.Snippet(declarations)]);
           }(A2($List.map,applyNamespaceToDeclaration(name),A2($List.concatMap,$Css$Preprocess.unwrapSnippet,_p10._1))));
         case "DocumentRule": return A5($Css$Preprocess.DocumentRule,_p10._0,_p10._1,_p10._2,_p10._3,A2(applyNamespaceToStyleBlock,name,_p10._4));
         case "PageRule": return declaration;
         case "FontFace": return declaration;
         case "Keyframes": return A2($Css$Preprocess.Keyframes,A2($Basics._op["++"],name,_p10._0),_p10._1);
         case "Viewport": return declaration;
         case "CounterStyle": return declaration;
         default: return declaration;}
   });
   var applyNamespaceToStyleBlock = F2(function (name,_p11) {
      var _p12 = _p11;
      return A3($Css$Preprocess.StyleBlock,
      A2(applyNamespaceToSelector,name,_p12._0),
      A2($List.map,applyNamespaceToSelector(name),_p12._1),
      A2($List.map,applyNamespaceToMixin(name),_p12._2));
   });
   var namespace = F2(function (rawIdentifier,snippets) {
      return A2($List.map,applyNamespaceToSnippet($Css$Helpers.toCssIdentifier(rawIdentifier)),snippets);
   });
   return _elm.Css.Namespace.values = {_op: _op,namespace: namespace};
};